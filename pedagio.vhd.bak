library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_bit.rising_edge;

entity pedagio is
	port(
		  RESET   : in    std_logic; -- reset input
        CLOCK   : in    std_logic; -- clock input
        A,B,C,D : in    std_logic; -- data inputs
        Q       : out   std_logic  -- data output
		a, b: in unsigned(3 downto 0);
		soma: out unsigned(3 downto 0);
		Cliente: in std_logic;
		Botao_Ent: in std_logic
		);
	end entity;


architecture arch of pedagio is
	
--component fulladder is
--	port(
--		Cin: in std_logic;
--		x: in std_logic;
--		y: in std_logic;
--		s: out std_logic;
--		Cout: out std_logic
--	);
--end component;

type estado is (Inicio,Espera,Leitura,S3);
signal estado_atual,proximo_estado : estado; --estado atual recebe o tipo de estado 
begin

 process (estado_atual)
	begin
		case estado_atual	is
			when S0 =>
				Q <= A;
			when S1 =>
				Q <= B;
			when S2 =>
				Q <= C;
			when S3 =>
				Q <= D;
end case;
end process; 
	

sequencial: process(CLOCK, RESET)
	begin
			if (RESET = '1') then
				estado_atual <= Inicio; --recebe o primeiro estado no reset
			elsif (rising_edge(CLOCK))then
				estado_atual <= proximo_estado;
			end if;
end process; 

combinacional: process(Cliente,Botao_Ent,estado_atual)
variable contagem : integer range 0 to 1000; 
begin
case estado_atual is
				when Inicio=>
				if(Cliente = '1') then
					proximo_estado <= Espera;
					else
					proximo_estado <= Inicio;
					end if;
					
				when Espera=>
				contagem = contagem+1; 
				if(Botao_Ent = '1') then
						proximo_estado <= Leitura;
					else if (contagem>1000)
						proximo_estado <= Inicio;
						contagem=0;
					end if;
					
				when Leitura=>
				if(S = '1') then
						proximo_estado <= S3;
					else
						proximo_estado <= S2 ;
					end if;
				when S3=>
				if(S = '1') then
						proximo_estado <= S0;
					else
						proximo_estado <= S3;
					end if;
		end case;
 end process combinacional;		
end arch;
